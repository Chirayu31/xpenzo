// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            Int      @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       Int?     @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id                  Int                @id @default(autoincrement())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  accounts            Account[]
  sessions            Session[]
  groups              GroupMember[]
  transactions        Transaction[]      @relation("CreatedTransactions")
  TransactionSplits   TransactionSplit[]
  settlementsPaid     Settlement[]       @relation("Payer")
  settlementsReceived Settlement[]       @relation("Payee")
  Category            Category[]
}

model Transaction {
  id          Int                @id @default(autoincrement())
  group       Group?             @relation(fields: [groupId], references: [id])
  groupId     Int?
  description String
  type        TransactionType
  amount      Float
  createdBy   User               @relation("CreatedTransactions", fields: [createdById], references: [id])
  createdById Int
  category    Category           @relation(fields: [categoryId], references: [id])
  categoryId  Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  splits      TransactionSplit[]
}

model Category {
  id           Int             @id @default(autoincrement())
  title        String
  type         TransactionType
  isDefault    Boolean         @default(false)
  user         User            @relation(fields: [userId], references: [id])
  userId       Int
  transactions Transaction[]
}

model Group {
  id                Int                @id @default(autoincrement())
  name              String
  members           GroupMember[]
  transactions      Transaction[]
  settlements       Settlement[]
  transactionSplits TransactionSplit[]
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  joinedAt DateTime @default(now())
  role     String
}

model TransactionSplit {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  amount        Float
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  group         Group       @relation(fields: [groupId], references: [id])
  groupId       Int
}

model Settlement {
  id        Int      @id @default(autoincrement())
  payer     User     @relation("Payer", fields: [payerId], references: [id])
  payerId   Int
  payee     User     @relation("Payee", fields: [payeeId], references: [id])
  payeeId   Int
  amount    Float
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  settledAt DateTime @default(now())
}

enum TransactionType {
  EXPENSE
  INCOME
}
